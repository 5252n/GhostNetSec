import nmap
import sqlite3
from datetime import datetime
from .app import app, log_event

class VulnerabilityScanner:
    def __init__(self):
        self.nm = nmap.PortScanner()
        self.common_vulnerabilities = {
            '21/tcp': 'FTP anonymous login',
            '22/tcp': 'SSH weak encryption',
            '23/tcp': 'Telnet cleartext protocol',
            '80/tcp': 'HTTP web server vulnerabilities',
            '443/tcp': 'HTSSL/TLS vulnerabilities',
            '3389/tcp': 'RDP vulnerabilities',
            '5900/tcp': 'VNC vulnerabilities'
        }
    
    def scan_device(self, ip_address):
        """Perform vulnerability scan on a specific device"""
        try:
            app.logger.info(f"Starting vulnerability scan for {ip_address}")
            
            # Perform comprehensive scan
            self.nm.scan(hosts=ip_address, arguments='-sV --script vulners')
            
            if ip_address not in self.nm.all_hosts():
                app.logger.error(f"Scan failed for {ip_address}")
                return False
            
            open_ports = []
            vulnerabilities = []
            
            for proto in self.nm[ip_address].all_protocols():
                ports = self.nm[ip_address][proto].keys()
                
                for port in ports:
                    port_info = self.nm[ip_address][proto][port]
                    open_ports.append(f"{port}/{proto}")
                    
                    # Check for common vulnerabilities
                    if f"{port}/{proto}" in self.common_vulnerabilities:
                        vulnerabilities.append({
                            'port': port,
                            'protocol': proto,
                            'service': port_info['name'],
                            'vulnerability': self.common_vulnerabilities[f"{port}/{proto}"],
                            'severity': 'Medium'
                        })
                    
                    # Check for NMAP script results
                    if 'script' in port_info:
                        for script, output in port_info['script'].items():
                            if 'vulners' in script.lower():
                                for line in output.split('\n'):
                                    if 'CVE-' in line:
                                        cve = line.split()[0]
                                        severity = self._get_cve_severity(line)
                                        vulnerabilities.append({
                                            'port': port,
                                            'protocol': proto,
                                            'service': port_info['name'],
                                            'vulnerability': cve,
                                            'severity': severity
                                        })
            
            # Update database
            db = sqlite3.connect(app.config['DATABASE'])
            cursor = db.cursor()
            
            # Find device by IP
            cursor.execute("SELECT id FROM devices WHERE ip = ?", (ip_address,))
            device = cursor.fetchone()
            
            if device:
                device_id = device[0]
                
                # Update device ports and vulnerabilities
                cursor.execute(
                    "UPDATE devices SET ports = ?, vulnerabilities = ? WHERE id = ?",
                    (','.join(open_ports), json.dumps(vulnerabilities), device_id)
                )
                
                # Create alerts for high severity vulnerabilities
                for vuln in vulnerabilities:
                    if vuln['severity'] in ['High', 'Critical']:
                        alert_msg = f"{vuln['vulnerability']} found on {ip_address}:{vuln['port']}"
                        cursor.execute(
                            """INSERT INTO alerts 
                               (device_id, alert_type, severity, message, timestamp) 
                               VALUES (?, ?, ?, ?, ?)""",
                            (device_id, 'Vulnerability', vuln['severity'], alert_msg, datetime.utcnow().isoformat())
                        )
                
                db.commit()
                log_event(None, 'vulnerability_scan', f"Scanned {ip_address}, found {len(vulnerabilities)} vulnerabilities")
                return True
            
            db.close()
            return False
        
        except Exception as e:
            app.logger.error(f"Vulnerability scan error for {ip_address}: {str(e)}")
            return False
    
    def _get_cve_severity(self, vulners_output):
        """Extract severity from vulners script output"""
        if 'High' in vulners_output:
            return 'High'
        elif 'Critical' in vulners_output:
            return 'Critical'
        elif 'Medium' in vulners_output:
            return 'Medium'
        return 'Low'
    
    def scan_network(self, network_range):
        """Scan all devices in a network range for vulnerabilities"""
        devices_to_scan = []
        
        # Get all active devices from database
        db = sqlite3.connect(app.config['DATABASE'])
        cursor = db.cursor()
        cursor.execute(
            "SELECT ip FROM devices WHERE last_seen > datetime('now', '-1 day')"
        )
        
        for device in cursor.fetchall():
            devices_to_scan.append(device[0])
        
        db.close()
        
        # Scan each device
        results = []
        for ip in devices_to_scan:
            if self.scan_device(ip):
                results.append(ip)
        
        return results